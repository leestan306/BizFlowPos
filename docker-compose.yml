# Docker Compose for BizFlow Application
# This file orchestrates the backend API and admin frontend services
#
# Required files alongside this docker-compose.yaml:
# - .env (single environment file for all services)
#
# Setup: Create .env file with all required variables
# Usage: docker-compose up -d

# Define named volumes for data persistence
volumes:
  # Volume to persist SQLite database across container restarts/updates
  sqlite_data:
    driver: local

# Define custom network for service communication
networks:
  bizflow_network:
    driver: bridge

services:
  # ===========================================
  # BACKEND SERVICE (server API)
  # ===========================================
  backend:
    # Use the pre-built image from Docker Hub
    image: stanleykariuki/biz-flow-server:latest

    # Container name for easy reference
    container_name: bizflow-backend

    # Restart policy - always restart unless explicitly stopped
    restart: unless-stopped

    # Load environment variables from single .env file
    env_file:
      - .env

    # Port mapping - expose server dev server
    ports:
      - "8000:8000"

    # Volume mounts for data persistence
    volumes:
      # Mount SQLite data directory for database persistence
      - sqlite_data:/var/www/html/storage/database

    # Networks this service should join
    networks:
      - bizflow_network

    # Health check to ensure service is running properly
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Commands to run before starting the main application
    command: >
      sh -c "
        # Create database directory if it doesn't exist
        mkdir -p /var/www/html/storage/database &&
        # Create SQLite database file if it doesn't exist
        touch /var/www/html/storage/database/database.sqlite &&
        # Ensure proper permissions
        chmod 664 /var/www/html/storage/database/database.sqlite &&
        # Run server optimizations
        php artisan config:cache &&
        php artisan route:cache &&
        # Run database migrations
        php artisan migrate --force &&
        # Seed the database with initial data
        php artisan db:seed --force &&
        # Start server development server
        php artisan serve --host=0.0.0.0 --port=8000
      "

  # ===========================================
  # ADMIN FRONTEND SERVICE (React/Vue/Angular SPA)
  # ===========================================
  admin:
    # Use the pre-built admin frontend image
    image: stanleykariuki/biz-flow-admin:latest

    # Container name for easy reference
    container_name: bizflow-admin

    # Restart policy
    restart: unless-stopped

    # Port mapping - expose nginx server
    ports:
      - "3000:80"

    # Networks this service should join
    networks:
      - bizflow_network

    # Wait for backend to be healthy before starting
    depends_on:
      backend:
        condition: service_healthy

    # Health check for the frontend service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
# ===========================================
# ADDITIONAL SERVICES (Optional)
# ===========================================

# Uncomment this section if you want to add a reverse proxy
# nginx:
#   image: nginx:alpine
#   container_name: bizflow-proxy
#   restart: unless-stopped
#   ports:
#     - "80:80"
#     - "443:443"
#   volumes:
#     - ./nginx.conf:/etc/nginx/nginx.conf:ro
#     - ./ssl:/etc/nginx/ssl:ro
#   depends_on:
#     - backend
#     - admin
#   networks:
#     - bizflow_network

# Uncomment this section if you want to add database management tool
# adminer:
#   image: adminer
#   container_name: bizflow-db-admin
#   restart: unless-stopped
#   ports:
#     - "8080:8080"
#   networks:
#     - bizflow_network
#   depends_on:
#     - backend

# ===========================================
# INSTRUCTIONS FOR SETUP
# ===========================================

# 1. Create single .env file with all variables:
#
#    Create .env file with ALL environment variables:
#
#    # === BACKEND CONFIGURATION (server) ===

#
#
#
# 2. Run the application:
#    docker-compose up -d
#
# 3. Access the application:
#    - Backend API: http://localhost:8000
#    - Admin Frontend: http://localhost:3000
#
#    Note: The admin frontend automatically detects and replaces API URLs
#    at startup based on the FRONTEND_API_URL environment variable.
#
# 4. View logs:
#    docker-compose logs -f backend
#    docker-compose logs -f admin
#
# 5. Stop the application:
#    docker-compose down
#
# 6. Update services:
#    docker-compose pull
#    docker-compose up -d
#
# 7. Backup database (from within container):
#    docker exec bizflow-backend cp /var/www/html/storage/database/database.sqlite /tmp/
#    docker cp bizflow-backend:/tmp/database.sqlite ./backup-$(date +%Y%m%d).sqlite
